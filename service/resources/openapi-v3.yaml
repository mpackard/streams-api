openapi: 3.0.0

info:
  title: "Streams API"
  description: "Manage Tapis Streams API."
  version: "1"
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Streams API"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: "BSD 3"
    url: "https://github.com/tapis-project/streams-api"

servers:
- url: http://localhost:5000
  description: Local Development
- url: https://dev.develop.tapis.io
  description: Develop Instance

paths:
  /sites:
    get:
      tags:
      - Sites
      summary: Get sites.
      description: Get sites.
      operationId: get_sites
      x-swagger-router-controller: connexContr
      parameters:
      - name: limit
        in: query
        description: limit the number of records returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                         - $ref: '#/components/schemas/SiteInfo'
                         - $ref: '#/components/schemas/GeoLocation'

    post:
      tags:
      - Sites
      summary: Create a site.
      description: Create a site.
      operationId: create_site
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSite'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                 result:
                    type: array
                    items:
                      allOf:
                         - $ref: '#/components/schemas/SiteInfo'
                         - $ref: '#/components/schemas/GeoLocation'

  /sites/{site-uuid}:
    get:
      tags:
      - Sites
      summary: Get site.
      description: Get site.
      operationId: get_site
      x-swagger-router-controller: connexContr
      parameters:
        - name: site-uuid
          in: path
          description: Unique ID of site generated by Tapis
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/SiteInfo'

    put:
      tags:
      - Sites
      summary: Update a site
      description: Update a site
      operationId: update_site
      x-swagger-router-controller: connexContr
      parameters:
        - name: site-uuid
          in: path
          description: Unique ID of site generated by Tapis
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSite'
      responses:
        '201':
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                 result:
                  $ref: '#/components/schemas/SiteInfo'

    delete:
      tags:
      - Sites
      summary: Delete a site
      description: Delete a site
      operationId: delete_site
      x-swagger-router-controller: connexContr
      parameters:
        - name: site-uuid
          in: path
          description: Unique ID of site generated by Tapis
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                 result:
                  $ref: '#/components/schemas/SiteInfo'
                  
  /v3/instruments:
    get:
      tags:
      - Instruments
      summary: List instruments
      description: List instruments
      operationId: list_instruments
      parameters:
        - name: limit
          in: query
          description: limit the number of records returned
          schema:
            type: integer
        - name: offset
          in: query
          description: index (offset) to start list
          schema:
            type: integer
      responses:
        '200':
          description: A list of instruments
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/arrayOfInstruments'

    post:
      tags:
        - Instruments
      summary: Create instruments (single or bulk)
      description: Create instruments (single or bulk)
      operationId: create_instrument
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstRequest'
      responses: 
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/arrayOfInstruments'

  /v3/instruments/{instrument_uuid}:
    get:
      tags:
        - Instruments
      summary: Get instrument details
      description: Get instrument details
      operationId: get_instrument
      parameters:
        - name: instrument_uuid
          in: path
          description: Unique ID of instrument generated by Tapis
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                     $ref: "#/components/schemas/Instrument"
                        
    put:
      tags:
        - Instruments
      summary: Update an instrument
      description: Update an instrument
      operationId: update_instrument
      #x-swagger-router-controller: connexContr
      parameters:
        - name: instrument_uuid
          in: path 
          description: Unique ID of instrument generated by Tapis
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInstRequest'
      responses:
        '201':
          description: Updated
          content:
           application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                   $ref: "#/components/schemas/Instrument"
                        
    delete:
      tags:
      - Instruments
      summary: Delete an instrument
      description: Delete an instrument
      operationId: delete_instrument
      #x-swagger-router-controller: connexContr
      parameters:
        - name: instrument_uuid 
          in: path 
          description: Unique ID of instrument generated by Tapis
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/DeleteInstrumentInfo'
                    
  /variables:
    get:
      tags:
       - Variables
      summary: Get variables.
      description: Get variables.
      operationId: get_variables
      x-swagger-router-controller: connexContr
      parameters:
      - name: limit
        in: query
        description: limit the number of records returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                         - $ref: '#/components/schemas/VarInfo'

    post:
      tags:
      - Variables
      summary: Create variable (single or bulk).
      description: Create variable (single or bulk).
      operationId: create_variable
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewVarRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                 result:
                    type: array
                    items:
                      allOf:
                         - $ref: '#/components/schemas/VarInfo'

  /variables/{variable-uuid}:
    get:
      tags:
      - Variables
      summary: Get variable details
      description: Get details of a specific variable by its id
      operationId: getVariable
      parameters:
      - name: variable-uuid
        in: path
        description: Unique ID of variable generated by Tapis
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/VarInfo'
    
    put:
      tags:
      - Variables
      summary: Update a variable
      description: Update a variable
      operationId: update_variable
      x-swagger-router-controller: connexContr
      parameters:
        - name: variable-uuid
          in: path
          description: Unique ID of variable generated by Tapis
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewVariable'
      responses:
        '201':
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                 result:
                  $ref: '#/components/schemas/VarInfo'                
                  
    delete:
      tags:
      - Variables 
      summary: Delete a variable (single or bulk)
      description: Delete a variable (single or bulk)
      operationId: delete_variable
      x-swagger-router-controller: connexContr
      parameters:
        - name: variable-uuid
          in: path
          description: Unique ID of variable generated by Tapis
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                 result:
                  $ref: '#/components/schemas/VarInfo'

  /measurements:
    get:
      tags:
        - Measurements
      summary: Get measurments.
      description: Get measurements.
      operationId: get_measurements
      x-swagger-router-controller: connexContr
      parameters:
        - name: limit
          in: query
          description: limit the number of records returned.
          schema:
            type: integer
        - name: offset
          in: query
          description: index (offset) to start list.
          schema:
            type: integer
        - name: start-date
          in: query
          description: start date of measurements
          schema:
            type: string
        - name: end-date
          in: query
          description: end date of measurements
          schema:
            type: string
        - name: geojson
          in: query
          description: geojson polygon to spatiall search
          schema:
            type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                         - $ref: '#/components/schemas/MeasurementInfo'
                         
    post:
      tags:
      - Measurements
      summary: Create a measurement.
      description: Create a measurement.
      operationId: create_measurement
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMeasurement'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                 result:
                    type: array
                    items:
                      allOf:
                         - $ref: '#/components/schemas/MeasurementInfo'

  /measurements/{measurement-uuid}:
    delete:
      tags:
        - Measurements
      summary: Delete measurments.
      description: Delete measurements.
      operationId: delete_measurements
      x-swagger-router-controller: connexContr
      parameters:
        - name: measurement-uuid
          in: path
          description: limit the number of records returned.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                         - $ref: '#/components/schemas/MeasurementInfo'
  
  /streams:
    get:
      tags:
       - Streams
      summary: Get streams.
      description: Get streams.
      operationId: get_streams.
      x-swagger-router-controller: connexContr
      parameters:
      - name: limit
        in: query
        description: limit the number of records returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: array
                    items:
                      allOf:
                         - $ref: '#/components/schemas/StreamInfo'

    post:
      tags:
      - Streams
      summary: Create streams. 
      description: Create streams. 
      operationId: create_stream
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewStream'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                 result:
                    type: array
                    items:
                      allOf:
                         - $ref: '#/components/schemas/StreamInfo'

  /streams/{stream-uuid}:
    get:
      tags:
      - Streams
      summary: Get streams details
      description: Get details of a specific streams by its id
      operationId: getStreams
      parameters:
      - name: stream-uuid
        in: path
        description: Unique ID of stream generated by Tapis
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/StreamInfo'
    
    put:
      tags:
      - Streams
      summary: Update a stream
      description: Update a stream
      operationId: update_stream
      x-swagger-router-controller: connexContr
      parameters:
        - name: stream-uuid
          in: path
          description: Unique ID of stream generated by Tapis
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewStream'
      responses:
        '201':
          description: Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                 result:
                  $ref: '#/components/schemas/StreamInfo'                
                  
    delete:
      tags:
      - Streams
      summary: Delete a stream
      description: Delete a stream
      operationId: delete_stream
      x-swagger-router-controller: connexContr
      parameters:
        - name: stream-uuid
          in: path
          description: Unique ID of stream generated by Tapis
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                 result:
                  $ref: '#/components/schemas/StreamInfo'


components:
  schemas:
    BasicResponse:
      type: object
      properties:
        version:
          type: string
          description: Version of the API
        message:
          type: string
          description: Brief description of the response
        status:
          type: string
          description: Whether the request was a success or failure.
          enum: [success, failure]

    BasicResult:
      type: object
      properties:
        resource_name:
          type: string
          description: Name of the resource.
        resource_id:
          type: string
          description: Id of the resource.
        resource_owner:
          type: string
          description: Owner of the resource
        resource_type:
          type: string
          description: Type of the resource

    SiteInfo:
      type: object
      properties:
        name:
          type: string
          description: Site name
        site-id:
          type: string
          description: The unique identifier for site
        owner:
          type: string
          description: The owner for site
        resource-type:
          type: string
          description: The type of resource.
          enum: [site]

    VarInfo:
      type: object
      properties:
        name:
          type: string
          description: The name of variable.
        variable_id:
          type: string
          description: The unique identifier for variable.
        owner:
          type: string
          description: The owner for variable.
        instrument_uuid:
          type: string
          description: The instrument uuid generated by Tapis.
        shortname:
          type: string
          description: The shortname of variable.
        unit:
          type: string
          description: The unit to measure property of variable.
        unit_abbrev:
          type: string
          description: The unit abbrevation to measure variable.
        measured_property:
          type: string
          description: The property measured by variable.
        resource-type:
          type: string
          description: The type of resource.
          enum: [variable]

    MeasurementInfo:
      type: object
      properties:
        datetime:
          type: string
          description: The datetimestamp of the measurement.
        instrument_id:
          type: integer
          description: The  identifier for an instrument.
      additionalProperties:
        type: string

    StreamInfo:
      type: object
      properties:
        name:
          type: string
          description: The name of stream.
        owner:
          type: string
          description: The owner for stream.
        query:
          type: object
          description: For continous query it needs frequency, group by time.RESAMPLE EVERY <interval> FOR <interval>
        triggers:
          type: array
          items: 
            type: object
          description: Each object in triggers array evaluates one variable using some mathematical function.
        query_type:
          type: string
          description: Type of query
          enum: [triggers, continous]
        resource-type:
          type: string
          description: The type of resource.
          enum: [stream]
        action:
          oneOf:
            - $ref: "#/components/schemas/Actor"
            - $ref: "#/components/schemas/Notification"
            - $ref: "#/components/schemas/Application"
            - $ref: "#/components/schemas/Callback"

    GeoLocation:
      type: object
      properties:
          longitude:
              type: number
              description: longitude
          latitude:
              type: number
              description: latitude
          elevation:
              type: number
              description: elevation

    NewSite:
      type: object
      properties:
        site-id:
          type: string
          pattern: "^[a-zA-Z0-9-]*$"
          description: The unique identifier for the tenant.
        resource-type:
          type: string
          enum: [site]
          description: Type of resource(site) to be generated.
        site_name:
          type: string
          description: Resource name.
        lat:
          type: number
          description: Latitude of site.
        lon:
          type: number
          description: Longitude of site.
        elevation:
          type: number
          description: Elevation of site.
      required: [resource-type, site-name, lat, lon, elevation]

    UpdateSite:
      type: object
      properties:
        site-uuid:
          type: string
          pattern: "^[a-zA-Z0-9-]*$"
          description: The unique identifier generated by Tapis.
        site_id:
          type: string
          pattern: "^[a-zA-Z0-9-]*$"
          description: The unique identifier for the tenant.
        resource-type:
          type: string
          enum: [site]
          description: Type of resource(site) to be generated.
        site-name:
          type: string
          description: Resource name.
        lat:
          type: number
          description: Latitude of site.
        lon:
          type: number
          description: Longitude of site.
        elevation:
          type: number
          description: Elevation of site.
      required: [site-uuid, site-id, resource-type, site-name, lat, lon, elevation]

    InstRequest:
      type: array
      items:
        $ref: '#/components/schemas/NewInstRequest'
    
    NewInstRequest:
      type: object
      properties:
        resource_type:
          type: string
          description: type of resource
          enum: [instrument]
        instrument_name:
          type: string
          description: Instrument name
        site_id:
          type: string
          pattern: "^[a-zA-Z0-9-]*$"
          description: Site Id to which instrument is attached
        description:
          type: string
          description: More information on instrument
        tags:
          type: array
          description: tags array
          items:
            type: string
        metadata:
          type: string
          description: user metadata on instruments
      required: [resource_type, site_id, instrument_name, description]
    
    UpdateInstRequest:
      type: object
      properties:
        resource_type:
          type: string
          description: type of resource
          enum: [instrument]
        instrument_uuid:
          type: string
          description: Instrument unique ID generated by Tapis
        instrument_name:
          type: string
          description: Instrument name
        site_id:
          type: string
          pattern: "^[a-zA-Z0-9-]*$"
          description: Site Id to which instrument is attached
        description:
          type: string
          description: More information on instrument
        tags:
          type: array
          description: tags array
          items:
            type: string
        metadata:
          type: string
          description: user metadata on instruments
      required: [resource_type, instrument_uuid, site_id, instrument_name, description]  
    
    Instrument:
      type: object
      properties:
        name:
          type: string
          description: Instrument name
        resource-type:
          type: string
          description: The type of resource.
          enum: [instrument]
        instrument_uuid:
          type: string
          pattern: "^[a-zA-Z0-9-]*$"
          description: The unique identifier generated by Tapis.
        instrument_id:
          type: string
          description: The unique identifier for instrument for a tenant
        owner:    
          type: string  
          description: Owner of the instrument
        site_id:
          type: string
          description: The site id to which instrument attached to
        created:
          type: string
          description: creation date of the instrument
        tags:
          type: array
          items:
            type: string
          description: arrays of tags on the instruments
        metadata:
          type: string
          description: User entered metadata for the instruments
          
    DeleteInstrumentInfo:
      type: object
      properties:
        name:
          type: string
          description: Instrument name
        resource-type:
          type: string
          description: The type of resource.
          enum: [instrument]
        instrument_uuid:
          type: string
          pattern: "^[a-zA-Z0-9-]*$"
          description: The unique identifier generated by Tapis.
        instrument_id:
          type: string
          description: The unique identifier for instrument for a tenant
        owner:    
          type: string  
          description: Owner of the instrument
        site_id:
          type: string
          description: The site id to which instrument attached to
    
    NewVarRequest:
      type: array
      items:
        $ref: '#/components/schemas/NewVariable'   

    NewVariable:
      type: object
      properties:
        var_name:
          type: string
          description: Variable name.
        shortname:
          type: string
          description: Shortname of variable.
        unit:
          type: string
          description: The unit to measure property of variable
        unit_abbrev:
          type: string
          description: The unit abbrevation to measure the property of variable.
        measured_property:
          type: string
          description: Property measured by the variable type
        format:
          type: string
          description: text for single variable creation and file for bulk variable creation
          enum: [text, file]
        storage_system:
          type: string
          description: Storage system name for file format
      required: [resource_type, var_name, unit, unit_abbrev, format]

    NewMeasurement:
      type: object
      properties:
        instrument_id:
          type: integer
          description: Associate instrument id.
        datetime:
          type: string
          description: The Datatime of the measurement
      additionalProperties:
        type: string
      required: [datetime, instument_id]
      
    NewStream:
      type: object
      properties:
        variable_uuid:
          type: string
          description: Associate variable id.
        query:
          type: object
          description: For continous query it needs frequency, group by time.RESAMPLE EVERY <interval> FOR <interval>
        triggers:
          type: array
          items: 
            type: object
          description: Each object in triggers array evaluates one variable using some mathematical function.
        query_type:
          type: string
          description: Type of query
          enum: [triggers, continous]
        action:
          type: string
          description: Type of action
          enum: [actor, callback, application, notifications]
          
    arrayOfInstruments:
      type: array
      items:
        $ref: '#/components/schemas/Instrument'

    Actor:
     type: object
     
    Notification:
     type: object
     
    Callback:
     type: object
     
    Application: 
     type: object
     
